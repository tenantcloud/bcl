#!/usr/bin/env bash

# _readlink wraps readlink in Linux or greadlink in Mac OS. We need this here
# since we can't import app/.helper/system yet.
_readlink() {
    if [ "$(uname -s)" == "Linux" ]; then
        readlink "$@"
        return $?
    elif [ "$(uname -s)" == "Darwin" ]; then
        greadlink "$@"
        return $?
    fi

    echo "Invalid kernel name $(uname -s)" && return 1
}

function _bash_cli() {
    local root_dir;
    root_dir=$(dirname "$(_readlink -f "$(which "${COMP_WORDS[0]}")")")

    local curr_arg;
    curr_arg="${COMP_WORDS[COMP_CWORD]}"
    prev_arg="${COMP_WORDS[COMP_CWORD-1]}"

    # Locate the correct command to execute by looking through the app directory
    # for folders and files which match the arguments provided on the command line.
    local cmd_file="$root_dir/app/"
    local cmd_arg_start=1

    # If current or previous argument is "help", don't suggest anyting
    if [[ "$curr_arg" == "help" || "$prev_arg" == "help" ]]; then
        COMPREPLY=()
        return
    fi

    while [[ -d "$cmd_file" && $cmd_arg_start -le $COMP_CWORD ]]; do
        cmd_file="$cmd_file/${COMP_WORDS[cmd_arg_start]}"
        cmd_arg_start=$((cmd_arg_start+1))
    done

    # If we've found something which doesn't exist, then let's
    # look at its containing directory for info.
    if [[ ! -e "$cmd_file" ]]; then
        cmd_file=$(dirname "$cmd_file")
    fi

    # If we found a command, then suggest the `--help` argument
    # TODO: Add parsing of .usage files for this
    if [[ -f "$cmd_file" ]]; then
        # Check if we've already got a `--help`, don't output anything
        # if we do.
        for i in $(seq $cmd_arg_start "$COMP_CWORD"); do
            if [[ "${COMP_WORDS[$i]}" == "--help" ]]; then
                COMPREPLY=()
                return
            fi
        done

        COMPREPLY=( "$(compgen -W '--help' -- "$curr_arg")" )
    # If we found a directory, then show all the commands which are
    # available within it, as well as the `help` virtual command.
    elif [ -d "$cmd_file" ]; then
        local opts=("help")
        file_list=$(find "$cmd_file"/ -maxdepth 1 ! -path "$cmd_file"/ ! -iname '*.*' -print)
        local file_list

        for file in "${file_list[@]}"; do
            opts=("${opts[@]}" "$(basename "$file")")
        done

        IFS="
        "
        COMPREPLY=( "$(compgen -W "$(printf '%s\n' "${opts[@]}")" -- "$curr_arg")" )
    fi
}
