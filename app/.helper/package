#!/usr/bin/env bash

set -e

# shellcheck disable=SC1090
source "$ROOT_DIR/app/.helper/system"

LATEST_VERSION="latest"
DEFAULT_CHANNEL="release"
DEFAULT_PLATFORM="$(platform)"
CACHE_DIRECTORY="${HOME}/.bcl/.cache"

# get_package_canonical_name formats package name, version, channel, and
# optionally target platform into a canonical name
#
# Examples:
#   - sv-v2.10.0-release
#   - pki-v2.2.2-rc1-darwin-x86_64
get_package_canonical_name() {
    package_name=$1
    package_version=$2
    package_channel=$3
    package_platform=$4

    if [[ -z "$package_platform" ]]; then
        echo "${package_name}-v${package_version}-${package_channel}"
        return
    fi

    echo "${package_name}-v${package_version}-${package_channel}-${package_platform}"
}

# get_package_canonical_name_without_platform discards target platform from a
# canonical name
get_package_canonical_name_without_platform() {
    package_canonical_name=$1

    package_name=$(get_package_name "$package_canonical_name")
    package_version=$(get_package_version "$package_canonical_name")
    package_channel=$(get_package_channel "$package_canonical_name")

    get_package_canonical_name "$package_name" "$package_version" "$package_channel"
}

# get_package_name parses a package's name from its canonical name
get_package_name() {
    echo "$1" | awk '{split($0,a,/-/); print a[1]}'
}

# get_package_version parses a package's numerical version from its canonical
# name
get_package_version() {
    version=$(echo "$1" | _grep -Po 'v[0-9]+\.[0-9]+\.[0-9]+' | _grep -Po '[0-9.]+')

    if [[ -z "$version" ]]; then
        echo $LATEST_VERSION
    else
        echo "$version"
    fi
}

# get_package_channel parses a package's release channel from its canonical name
get_package_channel() {
    channel=$(echo "$1" | awk '{split($0,a,/-/); print a[3]}')

    if [[ -z "$channel" ]]; then
        echo $DEFAULT_CHANNEL
    else
        echo "$channel"
    fi
}

# get_package_platform parses a package's target platform from its canonical
# name. Returns an empty string when the package canonical name does not specify
# the targeted platform.
get_package_platform() {
    local sed_opts="-nr"
    if [[ "$(kernel)" == "Darwin" ]]; then
        sed_opts="-nE"
    fi

    # Unlike package name and channel, platform can contain dashes, and thus
    # cannot be splitted with awk.
    echo "$1" | sed $sed_opts 's/^[a-zA-Z0-9]+-[a-zA-Z0-9.]+-[a-zA-Z0-9]+-?(.*)$/\1/p'
}

# get_available_packages list available packages in a bcl release git
# repository. Accepts the output of `git ls-remote` as an input.
get_available_packages() {
    local git_ls_remote="$1"

    echo "$git_ls_remote" | _grep -Poe 'refs/heads/.*$' | sed 's#refs/heads/##'
}

# get_package_commit_hash returns the commit has of a package release. Accepts
# the output of `git ls-remote` and the package canonical name as the inputs.
get_package_commit_hash() {
    local git_ls_remote="$1"
    local package_canonical_name="$2"

    echo "$git_ls_remote" | _grep -e "$package_canonical_name" | _grep -Poe '^[0-9a-fA-F]+'
}

# get_available_canonical_name returns the canonical name of available package
# satisfying several (optional) criteria: version, channel, and target platform.
get_available_canonical_name() {
    # The output of get_available_packages(). Accepted as a parameter so we
    # don't need to call git ls-remote multiple times when installing multiple
    # packages.
    packages_available="$1"

    package_name=$2
    package_version=$3
    package_channel=$4
    package_platform=$5

    if [[ -z "$package_version" ]]; then
        package_version=$LATEST_VERSION
    fi

    if [[ -z "$package_channel" ]]; then
        package_channel=$DEFAULT_CHANNEL
    fi

    if [[ -z "$package_platform" ]]; then
        package_platform=$DEFAULT_PLATFORM
    fi

    branches="$(echo "$packages_available" |  _grep -Pe "^$package_name-" || true | sort -V)"

    if [ "$package_version" == "$LATEST_VERSION" ]; then
        branches="$(echo "$branches" | _grep -Pe "^$package_name-" | _grep -Pe "-$package_channel" || true)"
    else
        # If a version number is specified, filter by it too
        branches="$(echo "$branches" | _grep -Pe "^$package_name-v$package_version-$package_channel" || true)"
    fi

    if [[ -z "$branches" ]]; then
        echo "Package \"$package_name\" with version \"$package_version\" of" \
            "channel \"$package_channel\" not found" >&2

        exit 1
    fi

    # Group packages by whether it has target platform information or not
    platformed_branches="$(echo "$branches" | _grep -Pe "-$package_channel-$package_platform\$" || true)"
    unplatformed_branches="$(echo "$branches" | _grep -Pe "-$package_channel\$" || true)"

    # Prefer packages with target platform information, even if it is not the
    # latest version
    latest_branch=""
    if [[ -n "$platformed_branches" ]]; then
        latest_branch=$(echo "$platformed_branches" | tail -n 1)
    else
        latest_branch=$(echo "$unplatformed_branches" | tail -n 1)
    fi

    echo "${latest_branch}"
}

# is_package_installed returns "true" whether a package with the same version
# and release channel is already installed in a directory
is_package_installed() {
    package_canonical_name=$1
    install_dir=$2

    package_name=$(get_package_name "$package_canonical_name")

    # We don't care about the package's target platform, so we need to discard
    # it
    package_canonical_name=$(get_package_canonical_name_without_platform "$package_canonical_name")

    if [[ -d "$install_dir/cli/$package_name" && -f "$install_dir/cli/$package_name/BUILD" ]]; then
        installed_package=$(head -n 1 "$install_dir/cli/$package_name/BUILD")
        installed_package=$(get_package_canonical_name_without_platform "$installed_package")

        if [ "$package_canonical_name" == "$installed_package" ]; then
            echo "true"
            return
        fi
    fi

    echo "false"
}

# install_package installs a package. Returns "true" if the package was
# installed (i.e. it was not present before or was outdated).
install_package() {
    local release_repo=$1
    local package_canonical_name=$2
    local package_commit_hash=$3
    local install_dir=$4
    local install_mode=$5

    if [[ "$install_mode" != "default" ]] && [[ "$install_mode" != "force" ]]; then
        install_mode="default"
    fi

    package_name=$(get_package_name "$package_canonical_name")
    package_installed=$(is_package_installed "$package_canonical_name" "$install_dir")

    if [[ "$install_mode" != "force" ]] && [[ "$package_installed" == "true" ]]; then
        echo "false"
        return
    fi

    # Cache the package
    cache_package "$release_repo" "$package_canonical_name" "$package_commit_hash" "$install_mode"

    # Copy the cached package
    local pkg_cache_dir="$CACHE_DIRECTORY/$package_canonical_name-$package_commit_hash"

    mkdir -p "$install_dir/cli"
    rm -rf "$install_dir/cli/$package_name"
    cp -R  "$pkg_cache_dir"/* "$install_dir/cli"

    echo "true"
}

# cache_package caches a package to $CACHE_DIRECTORY, skipping if the package
# is already cached.
#
# Args:
#   release_repo: Git repository address to clone from
#
#   package_canonical_name: Canonical name of the package to be cached, is also
#       the branch name in release_repo
#
#   package_commit_hash: Commit has of the package_canonical_name branch
#
#   cache_mode: Set to "force" to redownload the package. (Optional), defaults
#       to "default".
cache_package() {
    local release_repo=$1
    local package_canonical_name=$2
    local package_commit_hash=$3
    local cache_mode=$4

    if [[ "$install_mode" != "default" ]] && [[ "$install_mode" != "force" ]]; then
        install_mode="default"
    fi

    local pkg_cache_dir="$CACHE_DIRECTORY/$package_canonical_name-$package_commit_hash"

    if [[ -d "$pkg_cache_dir" ]] && [ "$cache_mode" != "force" ]; then
        return
    fi

    # "Install" the package into the cache directory
    mkdir -p "$CACHE_DIRECTORY"

    rm -rf "$pkg_cache_dir"
    mkdir -p "$pkg_cache_dir"

    git clone -b "$package_canonical_name" "$release_repo" --depth 1 "$pkg_cache_dir"
    rm -rf "$pkg_cache_dir/.git"
}

# clear_package_cache removes the package cache directory
clear_package_cache() {
    echo "Emptying package cache directory $CACHE_DIRECTORY..."
    rm -rf "$CACHE_DIRECTORY"
}
